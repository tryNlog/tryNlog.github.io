{"version":3,"file":"component---src-templates-blog-post-js-db54ad425c7216adea64.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/images/gatsby-icon.png","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n// import { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  // const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      {/* <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fullWidth\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      /> */}\n      {author?.name && (\n        <p>\n          Written by {author.name}<br></br>\n          {author?.summary || null}\n          {` `}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","export default __webpack_public_path__ + \"static/gatsby-icon-f4a8a76bbc8c551fea398534c5e39861.png\";","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport headerImage from '../images/gatsby-icon.png'\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">\n          <img src={headerImage} alt=\"header\" height={70} />\n          {/* {title} */}\n        </Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        © {new Date().getFullYear()}, Made by\n        {` `}\n        <a href=\"https://github.com/tryNlog\">tryNlog</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["author","useStaticQuery","site","siteMetadata","className","name","summary","location","title","children","isRootPath","pathname","header","Link","to","src","headerImage","alt","height","Date","getFullYear","href","description","metaDescription","defaultTitle","content","property","social","twitter","Head","data","markdownRemark","post","frontmatter","excerpt","previous","next","siteTitle","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}